initialize() {
	defineConstant("simID", getSeed());
	defineConstant("L", 1e8); // total chromosome length
	
	initializeTreeSeq();
	initializeMutationRate(2.36e-9); //A tenth of the original mutation rate
	initializeMutationType("m3", 00/10, "g", -0.03, 0.2); // mild deleterious
	m3.convertToSubstitution = F;
	
	initializeGenomicElementType("g2", m3, 1);
		
	lines = readFile("genetic_map_chr1_b37_100Mbp.txt");
	rates = NULL;
	ends = NULL;
	for (line in lines)
	{
		components = strsplit(line, " ");
		ends = c(ends, asInteger(components[0]));
		rates = c(rates, asFloat(components[1]));
	}
	ends = c(ends[1:(size(ends)-1)] - 2, L);
	rates = rates * 1e-8;
	initializeRecombinationRate(rates, ends);
	
	lines = readFile("ccdsGene.chr1.100Mbps.exons.uniq.noverlap.txt");
	for (line in lines)
	{
		components = strsplit(line, "\t");
		initializeGenomicElement(g2, asInteger(components[0])-1, asInteger(components[1])-1);
	}
}

// Create the ancestral African population
1 early() { 

	sim.addSubpop("p1", asInteger(round(7310.370867595234))); 
	catn("##simID:"+simID);}

// END BURN-IN period of 10*N=73104 generations (specific to SLiM recipe); EXPAND the African population
// This occurs (5919.131117 generations)*(25 years)=147978 yr ago; paper rounds to 5920 gens (148000 yr)
// Thus, simulation should end at generation 1+73104+5919.131117=79024
73105 early() { p1.setSubpopulationSize(asInteger(round(14474.54608753566))); }

// SPLIT Eurasians (p2) from Africans (p1) and SET UP MIGRATION between them
// This occurs 2056.396652 generations (51409.9163 years) ago; paper rounds to 2040 gens (51000 yr)
// Relative to beginning, this is generation 79024-2056.396652=76968
76968 early() {
	sim.addSubpopSplit("p2", asInteger(round(1861.288190027689)), p1); // paper rounds to 1861
	p1.setMigrationRates(c(p2), c(15.24422112e-5)); // paper rounds to 15e-5
	p2.setMigrationRates(c(p1), c(15.24422112e-5)); // paper rounds to 15e-5
}

// SPLIT p2 into European (p2) and East Asian (p3) subpopulations; RESIZE; SET UP MIGRATION between them
// This occurs 939.8072428 generations (23495.18107 years) ago; paper rounds to 920 gens (23000 yr)
// Relative to beginning, this is generation 79024-939.8072428=78084
78084 early() {
	sim.addSubpopSplit("p3", asInteger(round(553.8181989)), p2); // paper rounds to 554
	p2.setSubpopulationSize(asInteger(round(1032.1046957333444)));  // reduce European size; paper rounds to 1032

	// Set migration rates for the rest of the simulation
	p1.setMigrationRates(c(p2, p3), c(2.54332678e-5, 0.7770583877e-5)); // paper rounds to c(2.5e-5, 0.78e-5)
	p2.setMigrationRates(c(p1, p3), c(2.54332678e-5, 3.115817913e-5)); // paper rounds to c(2.5e-5, 3.11e-5)
	p3.setMigrationRates(c(p1, p2), c(0.7770583877e-5, 3.115817913e-5)); // paper rounds to c(0.78e-5, 3.11e-5)
}

// SET UP EXPONENTIAL GROWTH in Europe (p2) and East Asia (p3)
// Where N(0) is the base subpopulation size and t = gen - 78084:
//    N(Europe) should be int(round(N(0) * (1 + 0.003784324268)^t)), i.e., growth is r=0.38% per generation
//    N(East Asia) should be int(round(N(0) * (1 + 0.004780219543)^t)), i.e., growth is r=0.48% per generation
78084:79024 early() {
	t = sim.cycle - 78084;
	p2_size = round(1032.1046957333444 * (1 + 0.003784324268)^t); // paper rounds to N(0)=1032 and r=0.0038
	p3_size = round(553.8181989 * (1 + 0.004780219543)^t); // paper rounds to N(0)=554 and r=0.0048
	
	p2.setSubpopulationSize(asInteger(p2_size));
	p3.setSubpopulationSize(asInteger(p3_size));
}

// OUTPUT AND TERMINATE
// Generation 79024 is the present, i.e., 1 initialize + 73104 burn-in + 5919 evolution
79024 late() {
	sim.treeSeqOutput("./gravel.del.only.h00."+simID+".trees");
	out = string(length(sim.mutations.position));
	freqs = sim.mutationFrequencies(NULL);
	freqs1 = sim.mutationFrequencies(p1);
	freqs2 = sim.mutationFrequencies(p2);
	freqs3 = sim.mutationFrequencies(p3);
	
	for (i in 0:(length(sim.mutations.position)-1)){
		out[i]=paste(c(asString(sim.mutations.position[i]),sim.mutations.mutationType[i].id,sim.mutations.id[i],sim.mutations.mutationType[i].dominanceCoeff,sim.mutations.selectionCoeff[i],freqs[i],freqs1[i],freqs2[i],freqs3[i]));
	}
	header=paste(c("pos","type","mid","h","s","freq","p1_freq","p2_freq","p3_freq"));

	writeFile("./gravel.del.only.h00."+simID+".muts",paste(c(header,out),sep="\n"));

}
